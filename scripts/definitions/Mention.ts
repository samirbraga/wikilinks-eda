/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as Context from "./Context";
export interface IMentionArgs {
    wiki_url?: string;
    anchor_text?: string;
    raw_text_offset?: number;
    context?: Context.Context;
    freebase_id?: string;
}
export class Mention {
    public wiki_url?: string;
    public anchor_text?: string;
    public raw_text_offset?: number;
    public context?: Context.Context;
    public freebase_id?: string;
    constructor(args?: IMentionArgs) {
        if (args != null && args.wiki_url != null) {
            this.wiki_url = args.wiki_url;
        }
        if (args != null && args.anchor_text != null) {
            this.anchor_text = args.anchor_text;
        }
        if (args != null && args.raw_text_offset != null) {
            this.raw_text_offset = args.raw_text_offset;
        }
        if (args != null && args.context != null) {
            this.context = args.context;
        }
        if (args != null && args.freebase_id != null) {
            this.freebase_id = args.freebase_id;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Mention");
        if (this.wiki_url != null) {
            output.writeFieldBegin("wiki_url", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.wiki_url);
            output.writeFieldEnd();
        }
        if (this.anchor_text != null) {
            output.writeFieldBegin("anchor_text", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.anchor_text);
            output.writeFieldEnd();
        }
        if (this.raw_text_offset != null) {
            output.writeFieldBegin("raw_text_offset", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.raw_text_offset);
            output.writeFieldEnd();
        }
        if (this.context != null) {
            output.writeFieldBegin("context", thrift.Thrift.Type.STRUCT, 4);
            this.context.write(output);
            output.writeFieldEnd();
        }
        if (this.freebase_id != null) {
            output.writeFieldBegin("freebase_id", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.freebase_id);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Mention {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.wiki_url = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.anchor_text = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.raw_text_offset = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: Context.Context = Context.Context.read(input);
                        _args.context = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.freebase_id = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Mention(_args);
    }
}
