/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IPageContentItemArgs {
    raw?: Buffer;
    fullText?: string;
    articleText?: string;
    dom?: string;
}
export class PageContentItem {
    public raw?: Buffer;
    public fullText?: string;
    public articleText?: string;
    public dom?: string;
    constructor(args?: IPageContentItemArgs) {
        if (args != null && args.raw != null) {
            this.raw = args.raw;
        }
        if (args != null && args.fullText != null) {
            this.fullText = args.fullText;
        }
        if (args != null && args.articleText != null) {
            this.articleText = args.articleText;
        }
        if (args != null && args.dom != null) {
            this.dom = args.dom;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("PageContentItem");
        if (this.raw != null) {
            output.writeFieldBegin("raw", thrift.Thrift.Type.STRING, 1);
            output.writeBinary(this.raw);
            output.writeFieldEnd();
        }
        if (this.fullText != null) {
            output.writeFieldBegin("fullText", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.fullText);
            output.writeFieldEnd();
        }
        if (this.articleText != null) {
            output.writeFieldBegin("articleText", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.articleText);
            output.writeFieldEnd();
        }
        if (this.dom != null) {
            output.writeFieldBegin("dom", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.dom);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): PageContentItem {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: Buffer = input.readBinary();
                        _args.raw = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.fullText = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.articleText = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.dom = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new PageContentItem(_args);
    }
}
